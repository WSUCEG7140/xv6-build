name: CMake

on:
  pull_request:
    branches: [ "*" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: coverage

jobs:
  build:
    permissions:
      # Required to upload/save artifact, otherwise you'll get
      # "Error: Resource not accessible by integration"
      contents: write
      # Required to post comment, otherwise you'll get
      # "Error: Resource not accessible by integration"
      pull-requests: write
      
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Install tools
      run: sudo apt-get install graphviz doxygen clang-format cppcheck flawfinder llvm-dev qemu-system-x86
      
    - name: Clone
      run: git clone https://github.com/WSUCEG7140/xv6-public.git

    - name: Build
      # Build your program with the given configuration
      run: cd xv6-public; make qemu

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./tests

    - name: Coverage
      working-directory: ${{github.workspace}}/build
      run: make coverage

    - name: Artifacts
      uses: gavv/pull-request-artifacts@v1.0.0
      with:
          # Commit hash that triggered PR
          commit: ${{ github.event.pull_request.head.sha }}

          # Token for current repo (used to post PR comment)
          repo-token: ${{ secrets.GITHUB_TOKEN }}

          # Optional, uncomment to upload to another repository
          #artifacts-token: ${{ secrets.ANOTHER_TOKEN_WITH_PUSH_ACCESS }}
          #artifacts-repo: some/repository_name

          # Optional, uncomment to upload artifacts to specific branch, otherwise
          # the default branch is used.
          # Note that usually the main branch is protected by rules, so it's not
          # possible to upload there.
          # Perhaps, the best solution is to create an empty unprotected branch
          # dedicated for artifacts.
          # See README for details.
          artifacts-branch: artifacts

          # Whitespace-separated list of files to upload
          artifacts: |
            build/coverageSummary.txt
            build/coverageLines.html
            build/testResults.txt
